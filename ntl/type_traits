#pragma once

#include "system"

namespace ntl {

    template<typename T, T v>
    struct integral_constant {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const { return value; }
        constexpr value_type operator()() const { return value; }
    };

    template<bool B>
    using bool_constant = integral_constant<bool, B>;

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    namespace detail {

        struct one_t { char c[1]; };
        struct two_t { char c[2]; };
        template<typename T> one_t is_class_test(int T::*);
        template<typename T> two_t is_class_test(...);

        template<typename Base> true_type is_base_of_test(volatile const Base*);
        template<typename Base> false_type is_base_of_test(volatile const void*);
        template<typename Base, typename Derived>
        using pre_is_base_of = decltype(is_base_of_test<Base>(declval<Derived*>()));
        template <typename Base, typename Derived, typename = void>
        struct pre_is_base_of2 : public true_type { };
        template <typename Base, typename Derived>
        struct pre_is_base_of2<Base, Derived, void_t<pre_is_base_of<Base, Derived>>> : public pre_is_base_of<Base, Derived> { };

    }

    template<typename T>
    struct is_class
        : integral_constant<
        bool,
        sizeof(detail::is_class_test<T>(0)) == sizeof(detail::one_t)
        /* && !is_union_v<T> */ // TODO
        >
    {};

    template<typename T>
    inline constexpr bool is_class_v = is_class<T>::value;

    template<typename T> struct is_lvalue_reference : false_type {};
    template<typename T> struct is_lvalue_reference<T&> : true_type {};
    template<typename T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template<bool B, typename T, typename F>
    struct conditional { using type = T; };

    template<typename T, typename F>
    struct conditional<false, T, F> { using type = F; };

    template<bool B, typename T, typename F>
    using conditional_t = typename conditional<B, T, F>::type;

    template<typename T, typename U>
    struct is_same : false_type {};

    template<typename T>
    struct is_same<T, T> : true_type {};

    template<typename T, typename U>
    inline constexpr bool is_same_v = is_same<T, U>::value;

    template<typename Base, typename Derived>
    struct is_base_of
        : public conditional_t<
            is_class_v<Base> && is_class_v<Derived>,
            detail::pre_is_base_of2<Base, Derived>,
            false_type
        >
    {};

    template<typename Base, typename Derived>
    inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;
    
    template<typename T>
    struct remove_reference { using type = T; };

    template<typename T>
    struct remove_reference<T&> { using type = T; };

    template<typename T>
    struct remove_reference<T&&> { using type = T; };

    template<typename T>
    using remove_reference_t = typename remove_reference<T>::type;

    template<bool B, typename T = void>
    struct enable_if {};

    template<typename T>
    struct enable_if<true, T> { using type = T; };

    template<bool B, typename T = void>
    using enable_if_t = typename enable_if<B, T>::type;

}
