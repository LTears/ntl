#pragma once

#include "system"

namespace ntl {

    template<typename T>
    class allocator final {
    public:
        using value_type = T;
        using size_type = ntl::size_t;
        using difference_type = ntl::ptrdiff_t;

        constexpr allocator() {}

        constexpr allocator(allocator const &other) {}

        template<typename U>
        constexpr allocator(allocator<U> const &other) {}

        ~allocator() {}

        T* allocate(size_type n) {
            return new T[n];
        }

        void deallocate(T *p, size_type n) {
            delete[] p;
        }
    };

    template<typename T1, typename T2>
    bool operator==(allocator<T1> const &lhs, allocator<T2> const &rhs) {
        return false;
    }

    template<typename T>
    bool operator==(allocator<T> const &lhs, allocator<T> const &rhs) {
        return true;
    }

    template<typename T1, typename T2>
    bool operator!=(allocator<T1> const &lhs, allocator<T2> const &rhs) {
        return true;
    }

    template<typename T>
    bool operator!=(allocator<T> const &lhs, allocator<T> const &rhs) {
        return false;
    }
}
