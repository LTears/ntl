#pragma once

#include "system"

#ifdef NTL_USER_MODE

// Copy-paste from <wdm.h>
typedef enum _POOL_TYPE {
    NonPagedPool,
    NonPagedPoolExecute = NonPagedPool,
    PagedPool,
    NonPagedPoolMustSucceed = NonPagedPool + 2,
    DontUseThisType,
    NonPagedPoolCacheAligned = NonPagedPool + 4,
    PagedPoolCacheAligned,
    NonPagedPoolCacheAlignedMustS = NonPagedPool + 6,
    MaxPoolType,

    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = NonPagedPoolBase + 2,
    NonPagedPoolBaseCacheAligned = NonPagedPoolBase + 4,
    NonPagedPoolBaseCacheAlignedMustS = NonPagedPoolBase + 6,

    NonPagedPoolSession = 32,
    PagedPoolSession = NonPagedPoolSession + 1,
    NonPagedPoolMustSucceedSession = PagedPoolSession + 1,
    DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1,
    NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1,
    PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1,
    NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1,

    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = NonPagedPoolNx + 4,
    NonPagedPoolSessionNx = NonPagedPoolNx + 32,
} POOL_TYPE;

#endif

namespace ntl {

    template<typename T>
    class allocator final {
    public:
        using value_type = T;
        using size_type = ntl::size_t;
        using difference_type = ntl::ptrdiff_t;

        constexpr explicit allocator(POOL_TYPE pool_type = NonPagedPoolNx, ULONG tag = NTL_TAG, bool zero_initialize = true)
            : pool_type_(pool_type)
            , tag_(tag)
            , zero_initialize_(zero_initialize)
        {}

        constexpr allocator(allocator const &other)
            : pool_type_(other.pool_type_)
            , tag_(other.tag_)
        {}

        template<typename U>
        constexpr allocator(allocator<U> const &other)
            : pool_type_(other.pool_type_)
            , tag_(other.tag_)
        {}

        ~allocator() {}

        T* allocate(size_type n) {
#ifndef NTL_USER_MODE
            T *result = static_cast<T*>(ExAllocatePoolWithTag(pool_type_, sizeof(T) * n, tag_));
            if (!result) {
                ExRaiseStatus(STATUS_FATAL_MEMORY_EXHAUSTION);
            }
            if (zero_initialize_) {
                RtlZeroMemory(result, sizeof(T) * n);
            }
#else
            T *result = static_cast<T*>(calloc(n, sizeof(T)));
            if (!result) {
                SetLastError(ERROR_OUTOFMEMORY);
            }
#endif
            return result;
        }

        void deallocate(T *p, size_type n) {
#ifndef NTL_USER_MODE
            ExFreePoolWithTag(p, tag_);
#else
            free(p);
#endif
        }

    private:
        POOL_TYPE pool_type_;
        ULONG tag_;
        bool zero_initialize_;
    };

    template<typename T1, typename T2>
    bool operator==(allocator<T1> const &lhs, allocator<T2> const &rhs) {
        return false;
    }

    template<typename T>
    bool operator==(allocator<T> const &lhs, allocator<T> const &rhs) {
        return lhs.pool_type_ == rhs.pool_type_
            && lhs.tag_ == rhs.tag_
            && lhs.zero_initialize_ == rhs.zero_initialize_;
    }

    template<typename T1, typename T2>
    bool operator!=(allocator<T1> const &lhs, allocator<T2> const &rhs) {
        return true;
    }

    template<typename T>
    bool operator!=(allocator<T> const &lhs, allocator<T> const &rhs) {
        return lhs.pool_type_ != rhs.pool_type_
            || lhs.tag_ != rhs.tag_
            || lhs.zero_initialize_ != rhs.zero_initialize_;
    }
}
