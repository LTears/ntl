#pragma once

#include "type_traits"

namespace ntl {

    template<typename T>
    void swap(T &a, T &b) noexcept {
        T t = move(a);
        a = move(b);
        b = move(t);
    }

    template<typename T>
    constexpr T&& forward(typename remove_reference_t<T> &t) noexcept {
        return static_cast<T&&>(t);
    }

    template<typename T>
    constexpr T&& forward(typename remove_reference_t<T> &&t) noexcept {
        static_assert(!is_lvalue_reference_v<T>, "cannot forward an rvalue as an lvalue.");
        return static_cast<T&&>(t);
    }

    template<typename T>
    typename remove_reference_t<T>&& move(T &&t) noexcept {
        return static_cast<typename remove_reference_t<T>&&>(t);
    }

}
